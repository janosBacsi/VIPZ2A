//структура sBooks назначена для збереження списку книг в білбліотеці/книгарні
//у вигляді однозв'язного списку. Містить поля для збереження імені автора 
//(до 59 символів, без пробілів), прізвища автора(до 59 символів, без пробілів)
//назви книги(до 99 символів), року видання книги(цілочисельне додатнє значення 
//формату рррр), кількості сторінок в книзі(цілочисельне додатнє значення),
//вартість книги(цілочисельне невід'ємне значення) та вказівник на наступній
//елемент
struct sBooks {
	char chAuthorsFirsName[60];
	char chAuthorsLastName[60];
	char chNameOfTheBook[100];
	int iYearPublished;
	int iNumberOfPages;
	double iPriceOfTheBook;
	struct sBooks* pNext;
};

//виводить смужку для створення таблиці
//приймає єдиниц цілочисельний параметр, який вказує на кількість символів "-"
void printline(int);

//сортує список за прізвищами авторів в алфавітному порядку
//приймає єдиний параметр - вказівник на структуру Sbooks, який вказує на
//початок списку
void sortList(struct sBooks*);

//перевіряє чи відповідає стрічка формату імені/прізвища автора(лише літери, без
//пробілів)
//приймає один параметр - вказівник на стрічку-буфер, яку треба перевірити
//якщо стрічка задовільняє формат повертає 1, в іншому випадку - 0
int isString(char*);

//перевіряє чи є дійсне число корректно введеним(без літер, додатнє)
//приймає один параметр - вказівник на стрічку-буфер, яку треба перевірити
//якщо стрічка є відображенням дійсного числа повертає 1, в іншому випадку - 0
int isRealNumber(char*);

//перевіряє чи є ціле число корректно введеним(без літер, додатнє)
//приймає один параметр - вказівник на стрічку-буфер, яку треба перевірити
//якщо стрічка є відображенням дійсного числа повертає 1, в іншому випадку - 0
int isnum(char*);

//додає новий елемент в кінець списку
//приймає один параметр - вказівник на вказівник(Sbooks) початку списку
void addNewNode(struct sBooks**);

//зчитує список книг з файлу і динамічно виділяє пам'ять для елементів списку
//параметрами приймає 1)вказівник на стрічку(адреса файлу який треба зчитати)
//                    2)вказівник на вказівник першого елементу списку
//повертає 0, якщо файл є пустим
//         1, якщо зчитування і виділення пам'яті були успішними
int readFromFile(char*, struct sBooks**);

//видаляє елемент за заданою адресою і звільняє пам'ять динамічно виділену для
//нього
//параметрами приймає: 1)вказівник на вказівник на адресу елементу, який треба
//видалити
// 2)вказівник на вказівник на адресу елементу, який знаходиться перед
// елементом, який треба
//видалити 3)вказівник на вказівник початку списку
void removeElement(struct sBooks**, struct sBooks**, struct sBooks**);

//виводить книги з вартістю меншою за задану з можливістю їх видалення зі списку
//у випадку, якщо всі книги дорожчі за задану вартість, на екран виводиться
//повідомлення
//приймає єдиний параметр- вказівник на вказівник початку списку
void lessThanCertainPrice(struct sBooks**);

//виводить список у вигляді таблиці на екран консолі
//параметром приймає вказівник на перший елемент списку
void printList(struct sBooks*);

//зберігає список в файл, адреса файлу вводиться користувачем під час виконання
//функції
//парамтером приймає вказівник на початок списку
void writeToFile(struct sBooks*);

//видаляє елемент за його індексом
//якщо елемента за взазаним індексом не існує, виводить на екран повідомлення
//про це
//параметром приймає вказівник на вказівник початку списку
void deleteSingleElement(struct sBooks**);

//зберігає зміни в списку до файлу з якого список був зчитаний
//параметром приймає вказівник на початок списку
void saveChanges(struct sBooks*);

//проводить пошук за прізвищем автора, яке задається користувачем в ході
//виконання функції
//якщо не знайдено елементів, які задовільняють умови, на екран виводиться
//відповідне повідомлення
//параметром приймає вказівник на вказівник початку списку
void searchByAuthorsLastName(struct sBooks**);

//перевіряє чи є файл порожнім
//параметром приймає вказівник на файловий потік
//якщо файл є порожнім, повертає 1. В іншому випадку - 0
int ifFileEmpty(FILE*);

//знаходить дві книги з найбільшою кількістю сторінок і виводить їх на екран
//консолі
//параметром приймає вказівник на початку списку
void booksWithTheMostPages(struct sBooks*);

//надає можливість користувачеві редагувати елемент за заданою адресою
//параметром приймає вказівник на елемент, який потрібно відредагувати
void editElement(struct sBooks*);

//надає можливість користувачеві редагувати елемент за заданим індексом, який
//задається під час виконання функції
//параметром приймає вказівник на початок списку
void editElementByIndex(struct sBooks*);

//зчитування дійсного додатнього значення з клавіатури, присутній захисть від
//некоректного вводу
//повертає введене користувачем значення
double readFoolProofDouble();

//зчитування цілого додатнього значення з клавіатури, присутній захисть від
//некоректного вводу
//повертає введене користувачем значення
int readFoolProofInt();

//зчитування стрічки, яка відповідає формату ім'я/прізвище
//параметром приймає вказівник на зчитувану стрічку
void readFoolProofNameString(char* testedString);